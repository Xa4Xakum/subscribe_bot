from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.deep_linking import create_start_link
from aiogram.types import FSInputFile

from loguru import logger

from core.utils.filters import ChatType, TypeOfContent
from core.utils.keyboards import Keyboards
from core.utils.states import SendPayedPhoto
from core.utils.database import DataBase
from core.utils.operations import is_numeric

from config import Config
from helper import bot

r = Router()
r.message.filter(ChatType('private'))



@r.message(F.text, Command('start'))
async def start(msg: Message, state: FSMContext):

    await state.set_state(None)
    await state.set_data({})

    kb = Keyboards()
    params = msg.text.split()
    db = DataBase()
    referer = None

    logger.info(params)
    if len(params) == 2:
        await add_referal(params[1], msg.from_user.id)
        referer = int(params[1])

    user = db.get_user(msg.from_user.id)
    if user is None:
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–¥')
        db.add_user(
            user_id=msg.from_user.id,
            referer=referer,
            payed_up_to=datetime.now()
        )
    elif user.referer is None:
        db.edit_user_referer(msg.from_user.id, referer)

    await msg.answer(
        '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ VIP –≥—Ä—É–ø–ø–µ Scalp Meet üöÄ –∏ –ø–æ–ª—É—á–∏—Ç–µ:\n'
        ' ‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ —Å–∫–∞–ª—å–ø–∏–Ω–≥—É üìà\n'
        ' ‚Ä¢ –°–æ–æ–±—â–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏ –¥–ª—è –æ–±–º–µ–Ω–∞ –∑–Ω–∞–Ω–∏—è–º–∏ ü§ù\n'
        ' ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ üîç\n'
        ' ‚Ä¢ –ò–Ω—Å–∞–π–¥–µ—Ä—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö üìä\n'
        'VIP –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—é—Ç:\n'
        ' ‚Ä¢ –¢–æ–ø–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –≤–µ–¥—É—â–∏—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ üèÜ\n'
        ' ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é üìù\n'
        ' ‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è —Å–µ—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ üë•\n'
        ' ‚Ä¢ –ò–Ω—Å–∞–π–¥—ã –æ—Ç –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Ä—ã–Ω–∫–∞ üóùÔ∏è\n\n'

        '<b>–°—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é —ç–ª–∏—Ç–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ-–∫–ª—É–±–∞ –∏ —Ç–æ—Ä–≥—É–π—Ç–µ –∫–∞–∫ –ø—Ä–æ—Ñ–∏! üíºüî•</b>',
        parse_mode='html',
        reply_markup=kb.to_our_tarifs()
    )


@r.message(F.text == Keyboards.to_menu_btn.text)
async def menu(msg: Message, state: FSMContext):

    await state.set_state(None)
    await state.set_data({})

    kb = Keyboards()
    db = DataBase()
    referer = None
    user = db.get_user(msg.from_user.id)

    if user is None:
        db.add_user(
            user_id=msg.from_user.id,
            referer=referer,
            payed_up_to=datetime.now()
        )

    user = db.get_user(msg.from_user.id)

    if user.payed_up_to < datetime.now():
        text = '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç'
    else:
        text = (
            f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {user.payed_up_to}\n'
            f'–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–æ–≤—Ä–µ–º—è –µ–µ –æ–ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø'
        )

    await msg.answer(
        text=text,
        reply_markup=kb.menu_markup()
    )


@r.message(F.text == Keyboards.payed.text)
async def payed(msg: Message, state: FSMContext):

    kb = Keyboards()

    await msg.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ, –≥–¥–µ –º–æ–∂–Ω–æ —á–µ—Ç–∫–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–æ–º—É, —Å–∫–æ–ª—å–∫–æ –∏ –≤ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–µ–Ω—å–≥–∏',
        reply_markup=kb.to_menu_markup()
    )
    await state.set_state(SendPayedPhoto.get_photo)


@r.message(StateFilter(SendPayedPhoto.get_photo), TypeOfContent('photo'))
async def get_payed_photo(msg: Message, state: FSMContext):

    kb = Keyboards()
    conf = Config()
    db = DataBase()

    data = await state.get_data()
    if 'sended' in data:
        await msg.answer('–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç! –û—Ç–ø—Ä–∞–≤–∏–ª —Å –ø–µ—Ä–≤—ã–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º')
        await state.set_state(None)
        await state.set_data({})
        return

    msg_to_admin = await bot.send_photo(
        chat_id=conf.get_admin_id(),
        photo=msg.photo[0].file_id,
        caption=f'–§–æ—Ç–æ –æ—Ç @{msg.from_user.username}',
        reply_markup=kb.rewiew_markup()
    )

    db.add_pay(
        pay_from_user_id=msg.from_user.id,
        pay_message_id=msg_to_admin.message_id,
    )

    await msg.answer(
        '–û—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –¥–∞–º –∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
        reply_markup=kb.to_menu_markup()
    )
    await state.set_state(None)
    await state.set_data({})


@r.message(F.text == Keyboards.my_referals.text)
async def my_referals(msg: Message):
    kb = Keyboards()
    db = DataBase()
    link = await create_start_link(bot, str(msg.from_user.id))

    user = db.get_user(msg.from_user.id)
    logger.info(user)

    referals = db.get_all_referals(msg.from_user.id)
    text = (
        f'–ü—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 2 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–µ–¥–µ–ª–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ!'
        f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}\n'
        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(referals)}'
    )
    await msg.answer(text=text, reply_markup=kb.to_menu_markup())


@r.message(F.text == Keyboards.get_chat_link.text)
async def get_chat_link(msg: Message):
    conf = Config()
    kb = Keyboards()
    db = DataBase()
    user = db.get_user(msg.from_user.id)

    if user:
        if user.payed_up_to < datetime.now():
            await msg.answer('–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!')
            return
    else:
        await msg.answer(
            '–°—Ç—Ä–∞–Ω–Ω–æ... –≤–∞—Å –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —è –Ω–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å –≤–∞–º —Å—Å—ã–ª–∫—É. '
            '–ù–∞–ø–∏—à–∏—Ç–µ /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
        )
        return

    link = await bot.create_chat_invite_link(conf.get_chat_id(), expire_date=timedelta(1), member_limit=1)
    user = await bot.get_chat_member(chat_id=conf.get_chat_id(), user_id=msg.from_user.id)

    if user is None:
        await msg.answer(
            '–í—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –ø–æ —ç—Ç–æ–π <b>–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π</b> —Å—Å—ã–ª–∫–µ',
            reply_markup=kb.to_channel(link.invite_link),
            protect_content=True
        )
    else:
        await msg.answer('–í—ã —É–∂–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —á–∞—Ç!')


@r.message(F.text == Keyboards.tarifs.text)
async def tarifs(msg: Message):
    kb = Keyboards()
    requisites = FSInputFile("core/photos/requisites.jpg")
    await msg.answer_photo(
        requisites,
        '–°–µ–π—á–∞—Å –µ—Å—Ç—å —Ç—Ä–∏ —Ç–∞—Ä–∏—Ñ–∞:\n\n'
        '1 –º–µ—Å—è—Ü - 90 usdt\n'
        '3 –º–µ—Å—è—Ü–∞ - 220 usdt\n'
        '6 –º–µ—Å—è—Ü–µ–≤ - 380 usdt\n\n'
        '<code>TC4fi8Kcax1F5YmQjQort89T7ddrsPZz8H</code> - –Ω–∞–∂–º–∏, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å',
        reply_markup=kb.to_menu_markup(),
        parse_mode='html'
    )


@r.message(F.text == Keyboards.our_tarifs.text)
async def our_tarifs(msg: Message):
    kb = Keyboards()
    requisites = FSInputFile("core/photos/requisites.jpg")
    await msg.answer_photo(
        requisites,
        '–°–µ–π—á–∞—Å –µ—Å—Ç—å —Ç—Ä–∏ —Ç–∞—Ä–∏—Ñ–∞:\n\n'
        '1 –º–µ—Å—è—Ü - 90 usdt\n'
        '3 –º–µ—Å—è—Ü–∞ - 220 usdt\n'
        '6 –º–µ—Å—è—Ü–µ–≤ - 380 usdt\n\n'
        '<code>TC4fi8Kcax1F5YmQjQort89T7ddrsPZz8H</code> - –Ω–∞–∂–º–∏, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å',
        reply_markup=kb.payed_markup(),
        parse_mode='html'
    )


async def add_referal(referer, user_id):
    db = DataBase()

    if not is_numeric(referer):
        logger.warning(f'referer is not numeric({referer})')
        return

    referer = int(referer)
    ref_from_db = db.get_user(referer)

    if ref_from_db is None or referer == user_id:
        logger.info('ref_from_db is None')
        return

    user = db.get_user(user_id)

    if user is not None:
        if user.referer is None:
            if ref_from_db.payed_up_to < datetime.now():
                await bot.send_message(
                    ref_from_db.user_id,
                    '–í—ã –ø—Ä–∏–≤–µ–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –ø–æ—ç—Ç–æ–º—É –≤–∞–º —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏!'
                )
            db.add_subscribe(referer, timedelta(14))

    else:
        if ref_from_db.payed_up_to < datetime.now():
            await bot.send_message(
                ref_from_db.user_id,
                '–í—ã –ø—Ä–∏–≤–µ–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –ø–æ—ç—Ç–æ–º—É –≤–∞–º —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏!'
            )

            db.add_subscribe(referer, timedelta(14))
